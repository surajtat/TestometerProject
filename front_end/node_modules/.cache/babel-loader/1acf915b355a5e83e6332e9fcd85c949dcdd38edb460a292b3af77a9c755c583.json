{"ast":null,"code":"var _jsxFileName = \"E:\\\\Testo_meter\\\\front_end\\\\src\\\\components\\\\practice\\\\country.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport \"../../styles.css\";\nimport { useFormik } from \"formik\";\nimport Select from \"react-select\";\nimport csc from \"city-country-state\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Country() {\n  _s();\n  const addressFromik = useFormik({\n    initialValues: {\n      country: \"India\",\n      state: null,\n      city: null\n    },\n    onSubmit: values => console.log(JSON.stringify(values))\n  });\n  const countries = csc.getAllCountries();\n  const updatedCountries = countries.map(country => ({\n    label: country.name,\n    value: country.id,\n    ...country\n  }));\n  const updatedStates = countryId => csc.getStatesOfCountry(countryId).map(state => ({\n    label: state.name,\n    value: state.id,\n    ...state\n  }));\n  const updatedCities = stateId => csc.getCitiesOfState(stateId).map(city => ({\n    label: city.name,\n    value: city.id,\n    ...city\n  }));\n  const {\n    values,\n    handleSubmit,\n    setFieldValue,\n    setValues\n  } = addressFromik;\n  useEffect(() => {}, [values]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Select, {\n        id: \"country\",\n        name: \"country\",\n        label: \"country\",\n        options: updatedCountries,\n        value: values.country\n        // onChange={value => {\n        //   setFieldValue(\"country\", value);\n        //   setFieldValue(\"state\", null);\n        //   setFieldValue(\"city\", null);\n        // }}\n        ,\n        onChange: value => {\n          setValues({\n            country: value,\n            state: null,\n            city: null\n          }, false);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        id: \"state\",\n        name: \"state\",\n        options: updatedStates(values.country ? values.country.value : null),\n        value: values.state,\n        onChange: value => {\n          setValues({\n            state: value,\n            city: null\n          }, false);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        id: \"city\",\n        name: \"city\",\n        options: updatedCities(values.state ? values.state.value : null),\n        value: values.city,\n        onChange: value => setFieldValue(\"city\", value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: JSON.stringify(csc.get)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(Country, \"sHNEWIcgQyPJb99T7cPf1Vf/6Lk=\", false, function () {\n  return [useFormik];\n});\n_c = Country;\nvar _c;\n$RefreshReg$(_c, \"Country\");","map":{"version":3,"names":["React","useEffect","useFormik","Select","csc","jsxDEV","_jsxDEV","Country","_s","addressFromik","initialValues","country","state","city","onSubmit","values","console","log","JSON","stringify","countries","getAllCountries","updatedCountries","map","label","name","value","id","updatedStates","countryId","getStatesOfCountry","updatedCities","stateId","getCitiesOfState","handleSubmit","setFieldValue","setValues","className","children","options","onChange","fileName","_jsxFileName","lineNumber","columnNumber","type","get","_c","$RefreshReg$"],"sources":["E:/Testo_meter/front_end/src/components/practice/country.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"../../styles.css\";\r\nimport { useFormik } from \"formik\";\r\nimport Select from \"react-select\";\r\nimport csc from \"city-country-state\";\r\n\r\nexport default function Country() {\r\n  const addressFromik = useFormik({\r\n    initialValues: {\r\n      country: \"India\",\r\n      state: null,\r\n      city: null\r\n    },\r\n    onSubmit: (values) => console.log(JSON.stringify(values))\r\n  });\r\n\r\n  const countries = csc.getAllCountries();\r\n\r\n  const updatedCountries = countries.map((country) => ({\r\n    label: country.name,\r\n    value: country.id,\r\n    ...country\r\n  }));\r\n  const updatedStates = (countryId) =>\r\n    csc\r\n      .getStatesOfCountry(countryId)\r\n      .map((state) => ({ label: state.name, value: state.id, ...state }));\r\n  const updatedCities = (stateId) =>\r\n    csc\r\n      .getCitiesOfState(stateId)\r\n      .map((city) => ({ label: city.name, value: city.id, ...city }));\r\n\r\n  const { values, handleSubmit, setFieldValue, setValues } = addressFromik;\r\n\r\n  useEffect(() => {}, [values]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <form onSubmit={handleSubmit}>\r\n        <Select\r\n          id=\"country\"\r\n          name=\"country\"\r\n          label=\"country\"\r\n          options={updatedCountries}\r\n          value={values.country}\r\n          // onChange={value => {\r\n          //   setFieldValue(\"country\", value);\r\n          //   setFieldValue(\"state\", null);\r\n          //   setFieldValue(\"city\", null);\r\n          // }}\r\n          onChange={(value) => {\r\n            setValues({ country: value, state: null, city: null }, false);\r\n          }}\r\n        />\r\n        <Select\r\n          id=\"state\"\r\n          name=\"state\"\r\n          options={updatedStates(values.country ? values.country.value : null)}\r\n          value={values.state}\r\n          onChange={(value) => {\r\n            setValues({ state: value, city: null }, false);\r\n          }}\r\n        />\r\n        <Select\r\n          id=\"city\"\r\n          name=\"city\"\r\n          options={updatedCities(values.state ? values.state.value : null)}\r\n          value={values.city}\r\n          onChange={(value) => setFieldValue(\"city\", value)}\r\n        />\r\n        <button type=\"submit\">Submit</button>\r\n        <p>{JSON.stringify(csc.get)}</p>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}